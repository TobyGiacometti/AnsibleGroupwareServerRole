#!/usr/bin/env bash

# The curly braces (with the final `exit`) wrapping this script ensure that the
# whole script is loaded into memory before it is executed. As a result, issues
# are prevented when this script is formatted by itself.
{
	set -o errtrace
	set -o pipefail
	shopt -s globstar || exit

	#---
	# @stdout Help
	print_help() {
		cat <<-EOF
			Format the project's files.

			Usage:
			  $script_name
			  $script_name -c
			  $script_name -h

			Options:
			  -c  Check whether files are properly formatted. If issues are detected, a
			      non-zero exit status is used. Please note that no files are formatted
			      when this option is used.
			  -h  Print help.
		EOF
	}

	tty_fg_black="\033[30m"
	tty_bg_yellow="\033[43m"
	tty_reset="\033[0m"
	script_name=$(basename "$0")
	project_dir=$(cd "$(dirname "$0")/.." &>/dev/null && pwd) || exit
	shebang_regex='^#!\s?/(usr/)?bin/(env\s+)?(sh|bash)$'
	shfmt_opts="-bn -ci"
	exit_status=0

	while getopts :ch option; do
		case $option in
			c)
				check=1
				;;
			h)
				print_help
				exit
				;;
			\?)
				echo "Option is unknown: -$OPTARG" >&2
				exit 1
				;;
		esac
	done

	paths=("$project_dir"/**/*)
	for path in "${paths[@]}"; do
		if [[ $path = $project_dir/files/* ]]; then
			continue
		elif [[ $path = $project_dir/templates/* ]]; then
			continue
		elif [[ ! -r $path ]]; then
			echo "Not readable: $path" >&2
			exit 1
		elif [[ ! -f $path ]]; then
			continue # We can ignore directories that were matched by globstar.
		elif [[ $path =~ \.ya?ml$ ]]; then
			yamllint_files+=("$path")
		elif [[ ${path##*/} != *.* ]] \
			&& read -r shebang <"$path" \
			&& [[ $shebang =~ $shebang_regex ]]; then
			if [[ ${BASH_REMATCH[3]} = bash || ${BASH_REMATCH[3]} = sh ]]; then
				shfmt_files+=("$path")
			fi
		fi
	done

	if [[ $check -eq 1 ]]; then
		shfmt_opts+=" -d"
	else
		shfmt_opts+=" -w"
	fi

	# shellcheck disable=SC2086
	shfmt $shfmt_opts "${shfmt_files[@]}" || exit_status=1
	if [[ $check -eq 1 ]]; then
		yamllint --strict \
			--config-file <(
				cat <<-EOF
					extends: default
					rules:
					  document-end:
					    present: false
					  document-start:
					    present: false
					  empty-lines:
					    max: 1
					  indentation:
					    spaces: 2
					  key-duplicates: disable
					  line-length: disable
					  quoted-strings:
					    quote-type: double
					    required: only-when-needed
					  truthy: disable
				EOF
			) \
			"${yamllint_files[@]}" || exit_status=1
		ansible-lint -t 206 "$project_dir" || exit_status=1
	else
		printf "$tty_bg_yellow$tty_fg_black%s$tty_reset\n" "YAML files cannot be formatted automatically. Please use the check option (-c) and make manual adjustments." >&2
	fi

	exit "$exit_status"
}
